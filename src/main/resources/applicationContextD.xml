<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 1.确定了要增强的target对象 -->
    <!-- 对于spring来说，目标对象：就是bean对象 -->
    <!-- 基于接口类 -->
    <bean id="customerService" class="me.jiatao.ssm.spring.D_AspectJXML.CustomerServiceImpl"/>
    <!-- 基于一般类 -->
    <bean id="productService" class="me.jiatao.ssm.spring.D_AspectJXML.ProductService"/>


    <!-- 2.配置advice通知增强 -->
    <bean id="myAspectAdvice" class="me.jiatao.ssm.spring.D_AspectJXML.AspectXml"/>


    <!-- 3：配置aop -->
    <aop:config>
        <!-- 切入点:拦截哪些bean的方法 -->
        <aop:pointcut expression="bean(*Service)" id="myPointcut"/>
        <!--
            切面：要对哪些方法进行怎样的增强
            aop:aspect:aspejctj的方式！
            ref:配置通知
        -->
        <aop:aspect ref="myAspectAdvice">
            <!-- 第一个前置通知 ：在访问目标对象方法之前，先执行通知的方法
                method：advice类中的方法名，
                pointcut-ref="myPointcut"：注入切入点
                目的是让通知关联切入点
            -->
            <!--<aop:before method="firstbefore" pointcut-ref="myPointcut"/>-->
            <!--<aop:before method="firstbefore2" pointcut-ref="myPointcut"/>-->
            <!--<aop:before method="before" pointcut-ref="myPointcut"/>-->


            <!-- 后置通知
                returning:配置方法中的参数名字，与通知方法的第二个参数的名字，名字必须对应。
                在运行的时候，spring会自动将返回值传入该参数中。
            -->
            <aop:after-returning method="afterReturing" returning="returnVal" pointcut-ref="myPointcut"/>


            <!-- 环绕通知 -->
            <aop:around method="around" pointcut-ref="myPointcut"/>


            <!-- 抛出通知
				throwing:通知中的方法的第二个参数，异常类型的参数的名字，在运行的时候，spring会自动将异常传入该参数中。-->
            <aop:after-throwing method="aterThrowing" throwing="ex" pointcut-ref="myPointcut"/>

            <!-- 最终通知 -->
            <aop:after method="after" pointcut-ref="myPointcut"/>

            <!--  以上代码也可以写成：pointcut切入点表达式:只能给一个通知方法来用，相当于省略了<aop:pointcut expression="bean(*Service)" id="myPointcut"/>
			<aop:after method="after" pointcut="bean(*Service)"/>-->

        </aop:aspect>
    </aop:config>


</beans>